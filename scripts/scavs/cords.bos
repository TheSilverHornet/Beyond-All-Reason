#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, thrustfl, thrustfr, thrustbl, thrustbr,  flarefl, flarefr, flarebl, flarebr, 
	bomb3l, bomb3r, bomb2l, bomb2r, bomb1l, bomb1r, bay3l, bay3r, bay2l, bay2r, bay1l, bay1r;

static-var  statechg_DesiredState, statechg_StateChanging, currbomb, grunts_stockpiled;

Go()
{
}

Stop()
{
}

#define BASEPIECE base
#define HITSPEED <105.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

lua_BosSetStockpile(count) {
	return 1;
}

SetStockpile(num_stockpiled)
{
	get PRINT (num_stockpiled);
	if (num_stockpiled == 0)
	{
		hide bomb1l;
		hide bomb1r;
		hide bomb2l;
		hide bomb2r;
		hide bomb3l;
		hide bomb3r;
		sleep 100;
		grunts_stockpiled = 0;//avoid collision with currbomb for now, remove one later
	}
	if (num_stockpiled == 1)
	{
		show bomb1l;
		hide bomb1r;
		hide bomb2l;
		hide bomb2r;
		hide bomb3l;
		hide bomb3r;
		sleep 100;
		grunts_stockpiled = 1;
	}
	if (num_stockpiled == 2)
	{
		show bomb1l;
		show bomb1r;
		hide bomb2l;
		hide bomb2r;
		hide bomb3l;
		hide bomb3r;
		sleep 100;
		grunts_stockpiled = 2;
	}
	if (num_stockpiled == 3)
	{
		show bomb1l;
		show bomb1r;
		show bomb2l;
		hide bomb2r;
		hide bomb3l;
		hide bomb3r;
		sleep 100;
		grunts_stockpiled = 3;
	}
	if (num_stockpiled == 4)
	{
		show bomb1l;
		show bomb1r;
		show bomb2l;
		show bomb2r;
		hide bomb3l;
		hide bomb3r;
		sleep 100;
		grunts_stockpiled = 4;
	}
	if (num_stockpiled == 5)
	{
		show bomb1l;
		show bomb1r;
		show bomb2l;
		show bomb2r;
		show bomb3l;
		hide bomb3r;
		sleep 100;
		grunts_stockpiled = 5;
	}
	if (num_stockpiled == 6)
	{
		show bomb1l;
		show bomb1r;
		show bomb2l;
		show bomb2r;
		show bomb3l;
		show bomb3r;
		sleep 100;
		grunts_stockpiled = 6;
	}
}

Create(){

	hide bomb1l;
	hide bomb1r;
	hide bomb2l;
	hide bomb2r;
	hide bomb3l;
	hide bomb3r;
		
	turn flarefl to x-axis <-90> now; 
	turn flarefr to x-axis <-90> now; 
	turn flarebl to x-axis <-90> now; 
	turn flarebr to x-axis <-90> now; 

	hide flarefl;
	hide flarefr;
	hide flarebl;
	hide flarebr;
	
	currbomb = 0;
	//call-script InitState();
}

Activate()
{

	show flarefl;
	show flarefr;
	show flarebl;
	show flarebr;
	//start-script RequestState(0);
}

Deactivate()
{
	
	hide flarefl;
	hide flarefr;
	hide flarebl;
	hide flarebr;
	//start-script RequestState(1);
}

Reload(){
	set-signal-mask 32;
	sleep 3000;
	while (currbomb > 0) {
		currbomb = currbomb -1; 
			if (currbomb == 0) show bomb3l;
			if (currbomb == 1) show bomb3r;
			if (currbomb == 2) show bomb2l;
			if (currbomb == 3) show bomb2r;
			if (currbomb == 4) show bomb1l;
			if (currbomb == 5) show bomb1r;
		sleep 1000;
	}
}

QueryWeapon1(piecenum) // called third, and all the fucking time
{
	//get PRINT(3, currbomb);
	piecenum = bay3l + currbomb - 1;
	//piecenum = bomb3l;
}

AimFromWeapon1(piecenum)
{
	piecenum = base;
}


AimWeapon1(heading,pitch){
	//turn bay3l to y-axis <90> now;
	//turn bomb3l to y-axis <90> now;
	return 1;
}

Shot1(){ // called second, and after each bomb
	//get PRINT(2, currbomb);
	
	if (currbomb == 0) hide bomb3l;
	if (currbomb == 1) hide bomb3r;
	if (currbomb == 2) hide bomb2l;
	if (currbomb == 3) hide bomb2r;
	if (currbomb == 4) hide bomb1l;
	if (currbomb == 5) hide bomb1r;
	
	currbomb = currbomb + 1;
}

FireWeapon1(){ //called first and once only
	//get PRINT(1, currbomb);
	currbomb = 0;
	signal 32;
	//start-script Reload();
	
	call-script lua_BosSetStockpile(0);
}



QueryWeapon2(piecenum) // called third, and all the fucking time
{
	piecenum = bomb3r;
}
AimFromWeapon2(piecenum)
{
	piecenum = base;
}
AimWeapon2(heading,pitch){
	if (grunts_stockpiled>0) {
	return 1;
	} else {
	return 0;
	}
}
FireWeapon2(){
}



QueryWeapon3(piecenum) // called third, and all the fucking time
{
	piecenum = bomb3r;
}
AimFromWeapon3(piecenum)
{
	piecenum = base;
}
AimWeapon3(heading,pitch){
	if (grunts_stockpiled>1) {
	return 1;
	} else {
	return 0;
	}
}
FireWeapon3(){
}


QueryWeapon4(piecenum) // called third, and all the fucking time
{
	piecenum = bomb3r;
}
AimFromWeapon4(piecenum)
{
	piecenum = base;
}
AimWeapon4(heading,pitch){
	if (grunts_stockpiled>2) {
	return 1;
	} else {
	return 0;
	}
}
FireWeapon4(){
}

QueryWeapon5(piecenum) // called third, and all the fucking time
{
	piecenum = bomb3r;
}
AimFromWeapon5(piecenum)
{
	piecenum = base;
}
AimWeapon5(heading,pitch){
	if (grunts_stockpiled>3) {
	return 1;
	} else {
	return 0;
	}
}
FireWeapon5(){
}

QueryWeapon6(piecenum) // called third, and all the fucking time
{
	piecenum = bomb3r;
}
AimFromWeapon6(piecenum)
{
	piecenum = base;
}
AimWeapon6(heading,pitch){
	if (grunts_stockpiled>4) {
	return 1;
	} else {
	return 0;
	}
}
FireWeapon6(){
}



QueryWeapon7(piecenum) // called third, and all the fucking time
{
	piecenum = bomb3r;
}
AimFromWeapon7(piecenum)
{
	piecenum = base;
}
AimWeapon7(heading,pitch){
	if (grunts_stockpiled>5) {
	return 1;
	} else {
	return 0;
	}
}
FireWeapon7(){
}

















SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	// drop all undropped ones
	if (currbomb <=0) explode bomb3l type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	//if (currbomb <=1) explode bomb3r type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	//if (currbomb <=2) explode bomb2l type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	if (currbomb <=3) explode bomb2r type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	//if (currbomb <=4) explode bomb1l type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	if (currbomb <=5) explode bomb1r type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;

	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
    explode base type BITMAPONLY | NOHEATCLOUD;
	return corpsetype;
}
