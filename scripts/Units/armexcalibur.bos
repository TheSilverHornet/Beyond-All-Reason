
//piece  flare, hatch, post, p1, p2, p3, sleeve, turret, antenna, barrel, dish, light, tail, fins, core, con, base, wake;

//static-var  gun_1, shooting, is_open, restore_delay, statechg_DesiredState, statechg_StateChanging, shooting, shotcount;




#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, hatch1, hatch2, post, p1, p2, p3, turret, sleeve, barrel, flare, antenna, light, lightpoint, tail, fins, core, con, condar, base, wake, prop;

static-var  activated, restore_delay, statechg_DesiredState, statechg_StateChanging, shooting, shotcount, deployed, modpitch, Stunned;

// Signal definitions
#define SIG_AIM				2



ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	
	
	turn turret to z-axis <0.000000> speed <50.000000>;
	turn sleeve to x-axis <-90.000000> speed <50.000000>;
	wait-for-turn turret around z-axis;
	wait-for-turn sleeve around x-axis;

	
}

RestoreAfterDelay()
{
	sleep 3000;
	start-script ExecuteRestoreAfterDelay();
}



activatescr()
{	
	//move antenna to y-axis <15> speed <22>;
	if( TRUE )
	{
		turn hatch1 to z-axis <120> speed <120>;
		turn hatch2 to z-axis <-120> speed <120>;
		sleep 1000;
	}
	if( TRUE )
	{
		turn post to x-axis <90> speed <90>;
		turn sleeve to x-axis <-90> speed <90>;
		sleep 1000;
	}
	if( TRUE )
	{
		move p1 to z-axis [-25] speed [52];
		move p2 to z-axis [-25] speed [30];
		move p3 to z-axis [-25] speed [18];
		sleep 1000;
	}


	if( TRUE )
	{
		turn condar to x-axis <-90> speed <90>;
		move barrel to z-axis [8] speed [24];
		move light to z-axis [5] speed [16];
		move antenna to z-axis [-8.5] speed [22];
		sleep 1000;
	}

	if( TRUE )
	{
		spin condar around y-axis speed <90>;
		show lightpoint;
		//light
		sleep 1000;
		deployed = 1;
	}

	sleep 33;
	//todo: call movement deactivation script

}

deactivatescr()
{
	deployed = 0;
	if( TRUE )
	{
		hide lightpoint;
		stop-spin condar around y-axis;
		turn condar to y-axis <0> speed <90>;
		turn turret to z-axis <0> speed <80>;
		wait-for-turn condar around y-axis;
		wait-for-turn turret around z-axis;
		sleep 400;
	}
	if( TRUE )
	{
		hide lightpoint;
		turn condar to x-axis <0> speed <90>;
		move barrel to z-axis [0] speed [24];
		move light to z-axis [0] speed [16];
		move antenna to z-axis [0] speed [22];
		sleep 1000;
		wait-for-turn condar around x-axis;
	}

	if( TRUE )
	{
		move p1 to z-axis [0] speed [52];
		move p2 to z-axis [0] speed [30];
		move p3 to z-axis [0] speed [18];
		sleep 1000;
	}


	if( TRUE )
	{
		turn post to x-axis <00> speed <90>;
		turn sleeve to x-axis <0> speed <90>;
		sleep 1000;
	}

	if( TRUE )
	{
		turn hatch1 to z-axis <0> speed <120>;
		turn hatch2 to z-axis <0> speed <120>;
		sleep 1000;
	}


	sleep 33;
	//todo: call movement reactivation script
}


Go()
{
	set ARMORED to 0;
	if( !activated )
	{
		call-script activatescr();
	}
	activated = 1;
}

Stop()
{
	activated = 0;
	call-script deactivatescr();
	set ARMORED to 1;

}




InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	spin prop around z-axis speed <40>;
	hide flare;
	//move antenna to y-axis [-15] speed [240];
	//move base to z-axis [-15] speed [240];
	Stunned = 0;
	activated = 0;
	call-script InitState();
	restore_delay = 3000;
	shooting = 0;
	shotcount = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
	//spin dish around y-axis speed <90>;
}

lua_UnitScriptLight(lightIndex, count)
{
	return 0;
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

Activate()
{
	//call lua to Do Shit?
	start-script RequestState(0);//was 0
}

Deactivate()
{

	start-script RequestState(1);//was 1
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 5;
}

AimPrimary(heading, pitch)
{
    if (shooting==1) {return(0);}
    if (deployed==0) {return(0);}//currentstate?
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !activated )
	{
		sleep 150;
	}
		//sleep 150;
	//modpitch = pitch + 90;
	turn turret to z-axis heading speed <50.000000>;
	//turn sleeve to x-axis <0.000000> - modpitch speed <50.000000>;
	turn sleeve to x-axis <-90.000000> - pitch speed <50.000000>;
	wait-for-turn turret around z-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{

    shooting=1;
    shotcount = shotcount + 1;
    emit-sfx 1024 + 2 from flare;
    call-script lua_UnitScriptLight(1, shotcount);
	sleep 1400;
	shooting=0;
}

AimFromPrimary(piecenum)
{
	piecenum = barrel;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode post type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode antenna type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode light type BITMAPONLY | NOHEATCLOUD;
		explode condar type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type BITMAPONLY | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type FALL | NOHEATCLOUD;
		explode antenna type FALL | NOHEATCLOUD;
		explode light type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode condar type FALL | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode post type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type SMOKE | FALL | NOHEATCLOUD;
		explode antenna type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode light type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode condar type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode post type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode antenna type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode light type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode condar type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}

