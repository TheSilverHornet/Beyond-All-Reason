

#include "../recoil_common_includes.h"

piece  base, flare, tube, doorr, doorl, wake, firing,firing1,firing2, prop1, prop2;

static-var  restore_delay, shotcount, silo_state, timeLeft, Stunned;
// 0 = closed
// 1 = opening
// 2 = opened
// 3 = closing, fired missile
// 4 = closing, no missile fired

#define BASEPIECE base
#define HITSPEED <25.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 200

//#include "../unit_hitbyweaponid_and_smoke.h"

#define TB_BASE base 
#define TB_TURNRATE <30.0> 
#define TB_TILT_X <-0.32>
#define TB_BANK_Z <0.5> // Do not define this if you dont want banking
#define TB_WAKE_PIECE base
#define TB_WAKE_FOAM 1024 + 1
#include "../tilt_bank_submarine.h"

// Signal definitions
#define SIGNAL_AIM1				2
#define SIGNAL_MOVE				4
#define SIGNAL_AIM2			8
#define SIGNAL_RESTORE			16


Create()
{
	spin prop1 around z-axis speed <400>;
	spin prop2 around z-axis speed <400>;

	hide flare;
	hide firing;
	hide firing1;
	hide firing2;
	shotcount = 0;

	restore_delay = 3000;
	timeLeft = restore_delay;//seems needed to avoid instant cancellation of first aiming anims
	call-script TB_Init();

	silo_state = 0;
	return (0);
}



SetStunned(State)
{
    Stunned = State;
}


lua_UnitScriptLight(lightIndex, count) 
{
	return 0;
}

OpenSilo()
{
	show firing;
	show firing1;
	show firing2;

	turn firing1 to y-axis <30> speed <2>;
	turn firing2 to y-axis <-30> speed <2>;
	spin firing around z-axis speed <70> accelerate <3>;
	if ( (silo_state==0) OR (silo_state==4) )
	{
		// the sound effect
		emit-sfx 4096 + 2 from flare;
	}
	if ( NOT (silo_state==3) )
	{
		// 8.5 seconds to open up (all timings wrong, ignore)
		silo_state = 1;

		turn doorl to z-axis <-90> speed <15>;
		turn doorr to z-axis <90> speed <15>;
		wait-for-turn doorl around z-axis;
		wait-for-turn doorr around z-axis;

		turn tube to x-axis <-90> speed <15>;
		wait-for-turn tube around x-axis;

		silo_state = 2;
	}
}

CloseSiloDoors()
{
	turn firing1 to y-axis <0> speed <3>;
	turn firing2 to y-axis <0> speed <3>;
	stop-spin firing around z-axis decelerate 25;

	// 30 seconds to close from <127.5> open position

	turn tube to x-axis <0> speed <15>;
	wait-for-turn tube around x-axis;
	hide firing;
	hide firing1;
	hide firing2;

	turn doorl to z-axis <0> speed <25>;
	turn doorr to z-axis <0> speed <25>;
	wait-for-turn doorl around z-axis;
	wait-for-turn doorr around z-axis;

	silo_state = 0;
}

CloseSilo_Fired()
{
	silo_state = 3;
	signal SIGNAL_AIM2; // kill any OpenSilo threads
	start-script CloseSiloDoors();
}




TimeToRestore(addTime){
	signal SIGNAL_RESTORE;
	set-signal-mask SIGNAL_RESTORE;
    // This function may not be signal terminated
    // If it has to be, it _must_ be immediately restarted
    // PROBLEM: the time that is slept depends on number of aim calls.
    while((timeLeft > 1) || Stunned){
		//get PRINT(timeLeft, get GAME_FRAME);
        addTime = timeLeft;
        timeLeft = 1;
        sleep addTime;//can sometimes sleep 6000 but never wake up again?
    }
    // The restore section must be atomic :/

	sleep restore_delay;
	if ( NOT (silo_state==3) )
	{
		hide firing;
		silo_state = 4;
		start-script CloseSiloDoors();
	}
	return (0);

    timeLeft = 0;
}







AimPrimary(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	return (1);
}

FirePrimary()
{
	return (1);
}

QueryPrimary(piecenum)
{
	piecenum = firing;
	return (0);
}







AimSecondary(heading, pitch)
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	start-script OpenSilo();
	if (silo_state == 2)
	{
		return (1);
	}
	return (0);
}

FireSecondary()
{
	shotcount = shotcount + 1;
	call-script lua_UnitScriptLight(1, shotcount);
	call-script lua_UnitScriptLight(2, shotcount);
	start-script CloseSilo_Fired();
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}





StartMoving()
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	while( TRUE )
	{
		emit-sfx 1024 + 0 from wake;
		sleep 250;
		emit-sfx 1024 + 0 from wake;
		emit-sfx 1024 + 1 from wake;
		sleep 250;
	}
}

StopMoving()
{
	signal SIGNAL_MOVE;
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
	return corpsetype;
}
