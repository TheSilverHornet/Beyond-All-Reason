

#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, tube, doorr, doorl, wake, firing,firing1,firing2, prop1, prop2;

static-var  restore_delay, shotcount;

static-var  silo_state;
// 0 = closed
// 1 = opening
// 2 = opened
// 3 = closing, fired missile
// 4 = closing, no missile fired

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4

Create()
{
	spin prop1 around z-axis speed <400>;
	spin prop2 around z-axis speed <400>;

	hide flare;
	hide firing;
	shotcount = 0;
	restore_delay = 15000;
	silo_state = 0;
	return (0);
}

lua_UnitScriptLight(lightIndex, count) 
{
	return 0;
}

OpenSilo()
{
	show firing;
	show firing1;
	show firing2;

	turn firing1 to y-axis <30> speed <2>;
	turn firing2 to y-axis <-30> speed <2>;
	spin firing around z-axis speed <70> accelerate <3>;
	if ( (silo_state==0) OR (silo_state==4) )
	{
		// the sound effect
		emit-sfx 4096 + 1 from flare;
	}
	if ( NOT (silo_state==3) )
	{
		// 8.5 seconds to open up (all timings wrong, ignore)
		silo_state = 1;

		turn doorl to z-axis <-90> speed <15>;
		turn doorr to z-axis <90> speed <15>;
		wait-for-turn doorl around z-axis;
		wait-for-turn doorr around z-axis;

		turn tube to x-axis <-90> speed <15>;
		wait-for-turn tube around x-axis;

		silo_state = 2;
	}
}

CloseSiloDoors()
{
	turn firing1 to y-axis <0> speed <10>;
	turn firing2 to y-axis <0> speed <10>;
	stop-spin firing around z-axis decelerate <1>;

	// 30 seconds to close from <127.5> open position

	hide firing;
	turn tube to x-axis <0> speed <15>;
	wait-for-turn tube around x-axis;

	turn doorl to z-axis <0> speed <15>;
	turn doorr to z-axis <0> speed <15>;
	wait-for-turn doorl around z-axis;
	wait-for-turn doorr around z-axis;

	silo_state = 0;
}

CloseSilo_Fired()
{
	silo_state = 3;
	signal SIG_AIM; // kill any OpenSilo threads
	start-script CloseSiloDoors();
}

RestoreAfterDelay()
{
	sleep restore_delay;
	if ( NOT (silo_state==3) )
	{
		hide firing;
		silo_state = 4;
		start-script CloseSiloDoors();
	}
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	start-script OpenSilo();
	start-script RestoreAfterDelay();
	if (silo_state == 2)
	{
		return (1);
	}
	return (0);
}

FirePrimary()
{
	shotcount = shotcount + 1;
	call-script lua_UnitScriptLight(1, shotcount);
	call-script lua_UnitScriptLight(2, shotcount);
	start-script CloseSilo_Fired();
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}





StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 1024 + 0 from wake;
		sleep 250;
		emit-sfx 1024 + 0 from wake;
		emit-sfx 1024 + 1 from wake;
		sleep 250;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
	return corpsetype;
}
